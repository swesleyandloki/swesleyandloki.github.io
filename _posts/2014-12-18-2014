---
layout: post
title: $index-ng
---

##The ng-repeat directive in AngularJS is wonderful black magic.

**But it is easy to get lost in an array of DOM nodes that all look the same.**  For instance, if you would like each element in an ng-repeated list to have its own button, and to perform an action on click that is distinct from all the other buttons in the list, how would you go about referencing each individual button index in your code?

##Lucky for us, ng-repeat comes with **$index**

$index is a number value.  When referenced in HTML, it evaluates to the index of the current repeated element within the collection on which ng-repeat performs.  This is possible because ng-repeat renders each element's template in its own new scope in which $index is distinct.

###The real wizardry here is that the $index value can be applied to **anything** in the repeated template.

The buttons on your list items never had indices before, but ng-repeat allows them to inherit the $index of their parent collection element.

Within ng-repeated div:

	<pre><p><input type="checkbox" ng-model="likes[$index]">Like</p>
	<p><input type="checkbox" ng-model="dislikes[$index]">Dislike</p></pre>

You can even reference variable data from within each repeated div using an object on the scope with $index keys.  This is especially convenient for data that you want to persist.  You can now access the entire object outside the repeat and send it to your database as a single post request instead of having to make a post from inside each repeated element.  YAY!
 
**Woof Hack Reactor Woof**
 
Send me good vibes please world...
